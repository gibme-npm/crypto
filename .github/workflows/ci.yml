name: CI Build Tests

on:
  push:
  pull_request:
  release:
    types: [published]
  schedule:
    - cron: '30 3 * * *'

jobs:
  node_build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: ['18', '20', '22']
    name: ${{ matrix.os }} - Node ${{ matrix.node }} Test
    env:
      MSBUILD_PATH: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin"
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
    steps:
      - uses: actions/checkout@v1
      - name: Checkout Submodules
        run: git submodule update --init --recursive
      - name: Install ccache (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y ccache
      - name: Install ccache (OSX)
        if: matrix.os == 'macos-latest'
        run: brew install ccache || brew upgrade ccache
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.os }}-node-${{ matrix.node }}
      - uses: actions/setup-node@v1
        name: Set up Node
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org'
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-${{ matrix.node }}-
      - name: Install Yarn
        run: npm install -g yarn
      - name: Install Dependencies
        env:
          YARN_IGNORE_SCRIPTS: 1
        run: yarn --ignore-scripts
      - name: Check Package Versions
        run: yarn check:versions
      - name: Build Node Native Addon
        env:
          CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
        run: yarn node:build
      - name: Build WASM & Javascript (Linux & OSX)
        if: matrix.os != 'windows-latest'
        env:
          CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
        run: yarn js:build
      - name: Build WASM & Javascript (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: ./build_js.sh
      - name: Check Typescript Style
        run: yarn test:style
      - name: Build Typescript
        run: yarn ts:build
      - name: Execute Node C++ Addon Unit Tests
        run: yarn test
      - name: Execute JS Unit Tests
        run: yarn test:javascript
      - name: Execute WASM Unit Tests
        run: yarn test:wasm
      - name: Publish to NPM
        if: matrix.node == '18' && matrix.os == 'ubuntu-latest' && github.event_name == 'release'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

  browser:
    needs: node_build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        node: [ '18', '20', '22' ]
    name: ${{ matrix.os }} - Browser ${{ matrix.node }} Test
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        name: Set up Node
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org'
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-browser-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-browser-${{ matrix.node }}-
      - name: Install Yarn
        run: npm install -g yarn
      - name: Install Dependencies
        working-directory: ./browser
        run: yarn
      - name: Build Typescript
        working-directory: ./browser
        run: yarn build:typescript
      - name: Build Webpack
        working-directory: ./browser
        run: yarn build:webpack
      - name: Publish to NPM
        if: matrix.node == '18' && matrix.os == 'ubuntu-latest' && github.event_name == 'release'
        working-directory: ./browser
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

  prebuilds:
    needs: node_build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        node: [ '20' ]
    name: ${{ matrix.os }} - Prebuild ${{ matrix.node }} Node Binaries
    steps:
      - uses: actions/checkout@v1
      - name: Checkout Submodules
        run: git submodule update --init --recursive
      - name: Install ccache (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y ccache
      - name: Install ccache (OSX)
        if: matrix.os == 'macos-latest'
        run: brew install ccache || brew upgrade ccache
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.os }}-node-${{ matrix.node }}
      - uses: actions/setup-node@v1
        name: Set up Node
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org'
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-prebuilds-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-prebuilds-${{ matrix.node }}-
      - name: Install Yarn
        run: npm install -g yarn
      - name: Install Dependencies
        env:
          YARN_IGNORE_SCRIPTS: 1
        run: yarn install --ignore-scripts
      - name: Generate Prebuilds
        env:
          CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
        run: yarn prebuild:node --strip
      - name: Upload Prebuilds
        if: github.event_name == 'release'
        run: yarn prebuild:node --strip -u ${{ secrets.GITHUB_TOKEN }}

  docs:
    needs: node_build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node: [ '20' ]
    name: Build Documentation
    steps:
      - uses: actions/checkout@v1
      - name: Checkout Submodules
        run: git submodule update --init --recursive
      - uses: actions/setup-node@v1
        name: Set up Node
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org'
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-docs-${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-docs-${{ matrix.node }}-
      - name: Install Yarn
        run: npm install -g yarn
      - name: Install Dependencies
        env:
          YARN_IGNORE_SCRIPTS: 1
        run: yarn install --ignore-scripts
      - name: Build Documentation
        run: yarn docs:build
      - name: Push to Branch
        if: github.event_name == 'release'
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh_pages
          FOLDER: docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ({sha}) {msg}"
